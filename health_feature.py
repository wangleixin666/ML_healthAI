# coding:utf-8
# 对xgboost进行调参

from math import log1p, pow
import pandas as pd
import warnings
import xgboost
import sys
import numpy as np
import lightgbm as lgb

sys_new = reload(sys)
sys_new.setdefaultencoding('utf-8')
warnings.filterwarnings("ignore")


def calc_logloss(true_df, pred_df):
    loss_sum = 0
    rows = true_df.shape[0]
    for c in true_df.columns:
        true_df[c] = true_df[c].apply(lambda x: log1p(x))
        pred_df[c] = pred_df[c].apply(lambda x: log1p(x))
        true_df[c + 'new'] = pred_df[c] - true_df[c]
        true_df[c + 'new'] = true_df[c + 'new'].apply(lambda x: pow(x, 2))
        loss_item = (true_df[c + 'new'].sum()) / rows
        loss_sum += loss_item
        print c, loss_item
    return loss_sum / 5


if __name__ == '__main__':
    train_all = pd.read_csv(r'D:/kaggle/health/temp_data/train_other_deleted.csv')

    feature_0 = ['31', '316', '37', '100005', '319', '315', '669004', '669005', '33', '669001', '317', '39',
                 '100007', '300070', '979010', '809004', '809022', '0105', '34', '3184', '319100', '004997', '809009',
                 '809060', '809057', '809049', '21A002', '279001', '300007', '459161', '809008', '809010', '0106',
                 '709027', '809018', '339129', '809020', 'T99002', '1125', '1349', '310', '809043', '809051', '131',
                 '339128', '709016', '0108', '069008', '300006', '300069', '459154', '809023', '809054', '979024', '137',
                 '300022', '300119', '339130', '459329', '709022', '709023', '809017', '809053', '819020', '300117',
                 '809037', '0109', '10012', '279006', '300087', '3302', '709020', '809019', '809042', '809045', '809048',
                 '2451', '269031', '299168', '369108', '809033', '819019', 'I19027', '0107', '269030', '279002', '279005',
                 '300129', '709013', '709044', '809016', '809044', '809050', '809056', '069010', '1346', '184', '269029',
                 '279003', '300136', '300184', '459209', '699009', '809007', '809011', '809013', '809039', '819027',
                 '0111', '1471', '269028', '339107', '459206', '459340', '669010', '699003', '709043', '809027', '809059',
                 '819028', 'I69005', '019017', '300146', '311', '339122', '419008', '459327', '709004', '709025', '809029',
                 '809030', '809041', '809055', '809061', 'Q99002', 'U99009', '0112', '1124', '20000', '300176', '339106', '339126',
                 '35', '459116', '459159', '459183', '509006', '559007', '809005', '809031', '809036', '809038', '819009',
                 '819024', 'X19011', '019046', '069005', '134', '2453', '269055', '269057', '300179', '339105', '339114', '36',
                 '378', '459158', '669043', '709019', '709048', '809058', '979025', '979026', 'I69004', 'P19033', 'X19001', '019059',
                 '069049', '129079', '1359', '1918', '269052', '279004', '300015', '300166', '439015', '459182', '459342', '669045',
                 '809006', '809026', '809040', '819011', '819013', '819016', '899022', '979093', 'D29008', 'D29009', 'I69003', 'L19008',
                 '019003', '069002',
                 '069003', '1', '1123', '1136', '159053', '3816', '769008', '809028', '809032', '809046', '809047',
                 '819029', 'J29018',
                 'Q99001', '019002', '019037', '019038', '019040', '019050', '019062', '069004', '069007', '10005', '1816',
                 '2392', '300037',
                 '300169', '300172', '300182', '459117', '459155', '459333', '459336', '459337', '459338', '669014',
                 '699004', '709024',
                 '729028', '809012', '809034', '819012', '819014', '819015', '819017', '819021', '819030', 'D29011',
                 'Y79001', '019035',
                 '019056', '069050', '10000', '159063', '2452', '300039', '300072', '300080', '300111', '300118', '300170',
                 '300175',
                 '300178', '300183', '300190', '339131', '369098', '3814', '439011', '439016', '459156', '459207',
                 '459211', '459331',
                 '539004', '699005', '709030', '709031', '769019', '809014', '819022', '819025', '819026', '839018',
                 '979094', 'T99001',
                 'X19003']

    feature_1 = ['31', '316', '100005', '33', '669005', '100007', '669004', '319', '37', '315', '39', '317', '669001',
                 '979010', '279006', '300070', '809004', '809009', '34', '004997', '1349', '279001', '300015', '809008',
                 '0105',
                 '809020', '809022', '300007', '809054', '709016', '809049', '809060', '459161', '809023', '3184',
                 '809019',
                 '809048', '1125', '184', '300006', '369108', '699009', '709022', '809050', '069010', '137', '339129',
                 '459154',
                 '709020', '709023', '809018', '809036', '131', '20000', '21A002', '339128', '35', '709004', '709013',
                 '979024',
                 '300119', '809010', '809027', '809029', '809039', '819020', '2451', '269031', '279005', '709027',
                 '809013',
                 '809033', '809038', '809053', '819024', '0111', '019059', '1124', '319100', '339130', '419008', '459329',
                 '809017',
                 '809051', '809056', '809057', 'I19027', '0107', '0109', '229080', '299168', '310', '339122', '509006',
                 '739005',
                 '809030', '809037', '819009', '819019', 'I69005', 'U99009', '0106', '069008', '300179', '459206',
                 '459338', '809026',
                 '809044', '979093', 'D29009', 'Q99002', 'T99002', '0108', '10012', '1816', '269028', '269052', '300129',
                 '709024',
                 '809031', '809058', 'J29018', '069002', '300003', '300146', '3302', '339105', '339107', '459183',
                 '459327', '809016',
                 '809034', '809041', '809046', '819013', '819026', 'Y79001', '019017', '269057', '279004', '300069',
                 '300166', '300183',
                 '339131', '459331', '459336', '809005', '809007', '809011', '809040', '809042', '809045', '809061',
                 '819015', '979026',
                 'I69003', '019001', '069005', '10000', '159063', '279003', '300080', '300087', '300176', '300184',
                 '459159', '669010',
                 '699003', '709025', '809028', '819011', '819023', '819027', '819029', '819031', 'T99001', '1359',
                 '159053', '2392',
                 '300118', '300171', '311', '459117', '459181', '459209', '709019', '709031', '709043', '809055',
                 '819014', '819021',
                 '819025', 'Q99001', '069003', '069044', '069049', '1123', '279002', '279028', '300172', '300178', '319159',
                 '339106',
                 '346', '3814', '3816', '459342', '769008', '809014', '809059', '819010', '819016', '979025', 'D29008',
                 'D29011',
                 'P19033', '019002', '019034', '019048', '019062', '129079', '134', '1346', '1915', '269029', '269055',
                 '300077', '300111',
                 '300114', '300117', '300168', '300170', '300190', '36', '439015', '459156', '459182', '459211',
                 '459332', '669043',
                 '669046', '759001', '809032', '809035', '809043', '819012', '839018', '979029', 'L19008', '019003',
                 '019032', '019043',
                 '069050', '10005', '10014', '1136', '129058', '1471', '179176', '179226', '199118', '2452', '300136',
                 '300174', '300175',
                 '339125', '439011', '439016', '439035', '459116', '459158', '459207', '459208', '459340', '559046',
                 '669014', '669044',
                 '669045', '709048', '729028', '769019', '809012', '809015', '809047', '819008', '819022', '819028',
                 '819030', '899021',
                 '899022', '979092', '979096', 'D29010', 'I69004', 'X19002']

    feature_2 = ['33', '31', '319', '37', '316', '315', '100005', '39', '669005', '100007', '317', '709020', '979010',
                 '10012', '809004', '004997', '669004', '439035', '809022', '339130', '669001', '809049', '34', '1349',
                 '669044',
                 '1359', '809027', '300070', '809009', '3302', '339129', '300117', '709004', 'P19033', '319100',
                 '279001',
                 '300006', '809010', '809056', '069049', '300007', '979024', '809008', '809060', '819013', '0112',
                 '300069',
                 '709027', '809046', '0106', '1125', '300022', '809023', 'J29018', '019017', '1816', '279002', '279006',
                 '339128',
                 '459154', '459183', '809013', '809016', '809017', '809039', '809055', '709016', '709025', '809018',
                 '809037',
                 '809048', '0107', '809043', '819019', '019003', '339126', '339131', '809053', '809054', '809061',
                 '979025', '21A002',
                 '339106', '709013', '709022', '809020', '809045', '809051', '819009', '819016', '019002', '069004',
                 '179177', '184',
                 '2452', '459161', '459206', '809019', '809044', '819014', '819027', 'L19008', '0105', '0108', '0111',
                 '069002', '179178',
                 '20000', '229080', '300080', '300169', '300187', '35', '459331', '669010', '809033', '809041', '0109',
                 '069003', '069010',
                 '137', '1915', '269030', '300119', '459329', '769008', '809038', '809050', '069050', '1136', '269028',
                 '279004', '279005',
                 '299168', '300129', '300146', '300179', '310', '3184', '339122', '459141', '459207', '809040', '809047',
                 '809058', 'I19027',
                 '21A012', '269031', '311', '339107', '439015', '459159', '809007', '809011', '809029', '809030',
                 '809032', '819026', '069005',
                 '2453', '269057', '300184', '300186', '339125', '36', '369108', '459158', '459211', '669045', '709023',
                 '709044', '729028',
                 '759001', '809014', '809057', '819011', '979095', 'I69005', '1124', '134', '269029', '279003', '300003',
                 '300015', '300087',
                 '300180', '300188', '300189', '369007', '439011', '459342', '809012', '809031', '809034', '809036',
                 '809059', '819021', '819023',
                 '819024', '979027', 'T99002', '069008', '069044', '10014', '131', '179176', '1918', '199118', '2451',
                 '269052', '300175', '300183',
                 '300185', '300190', '319159', '339105', '3818', '419008', '459184', '459340', '669014', '709019',
                 '709024', '709043', '739005',
                 '809026', '809028', '809035', '819010', '819031', '839018', '979026', '979029', 'T99001', '019001',
                 '019008', '019038', '019045',
                 '019052', '019056', '019059', '019062', '1', '10005', '269056', '300136', '300168', '300171', '300172',
                 '300181', '3816', '459116',
                 '459117', '459156', '459182', '699005', '699009', '709048', '769019', '809005', '809006', '809015',
                 '809042', '819008', '819020',
                 '819022', '819029', '819030', 'I69003', 'I69004', 'Y79001']

    feature_3 = ['317', '33', '31', '100005', '3184', '39', '37', '100007', '979010', '315', '279006', '316', '319',
                 '669001', '300136', '300070', '34', '809049', '709022', '709031', '21A002', '300007', '809009',
                 '809048', '809013', '809019', '809033', '669004', '669005', '809020', '979024', '004997', '229080',
                 '709016', '809051', '184', '300006', '809012', '279001', '300069', '709004', '809008', '809028',
                 '669014', '709025', '809053', '809055', '819024', '0107', '459161', '809022', '809046', '819021',
                 '819031', '269052', '319100', '339106', '709020', '809010', '0108', '137', '279002', '300015',
                 '709013', '809043', '1461', '279004', '310', '809006', '809038', '809060', '819013', '0112',
                 '2453', '299168', '809018', '809034', '269030', '279003', '669010', '809037', '819008', '819029',
                 'I69003', 'I69005', 'L19008', '069008', '1349', '199118', '300129', '339135', '3818', '809023',
                 '809029', '809056', '819030', 'T99001', '069003', '10005', '1136', '134', '1471', '179178', '300075',
                 '300119', '311', '339129', '809050', '809054', '809057', '819009', 'K29002', '019017', '1124', '1125',
                 '2452', '339128', '339130', '459154', '709019', '809039', '069044', '10012', '1816', '300087', '300179',
                 '35', '669045', '709048', '729028', '809007', '809016', '809027', '809045', '809061', 'G49050',
                 'I19027',
                 'P19033', '0106', '0111', '269028', '319273', '369108', '459208', '459338', '699009', '809031', '809042',
                 '819010', '819020', '819026', '839018', '979025', 'T99002', '0105', '019001', '300080', '300169',
                 '300172',
                 '339107', '36', '459159', '459327', '669043', '709043', '809004', '809040', '809044', '809047',
                 '809058',
                 '819017', '979029', 'Q99002', '019062', '131', '20000', '269029', '3302', '378', '439035', '459158',
                 '509006',
                 '709024', '739005', '759001', '809017', '809030', '819014', '819019', '819023', 'D29011', '019003',
                 '019040',
                 '069002', '069049', '10014', '1359', '269055', '300003', '300077', '339114', '3814', '3816', '419008',
                 '439015',
                 '459141', '459336', '809005', '809032', '809041', '809059', '819015', '819025', '819027', 'X19003',
                 '0109',
                 '019002', '019044', '019046', '019047', '019059', '069004', '159053', '179177', '2392', '269058', '279005',
                 '300187',
                 '339126', '339131', '346', '369098', '459155', '459211', '459331', '459342', '709023', '809014',
                 '809026', '819011',
                 '819012', '819022', '819028', 'D29010', 'Y79001', '019032', '019051', '069005', '069007', '1', '1346',
                 '159063', '1915',
                 '269056', '300039', '300072', '300180', '339125', '439011', '459156', '459206', '459209', '459337',
                 '459340', '669044',
                 '699005', '699006', '709027', '709030', '769008', '819016', '899021', '979026', '979027', 'I69004']

    feature_4 = ['31', '100005', '315', '317', '319', '100007', '33', '316', '37', '39', '979010', '669004',
                 '809022', '669001', '319100', '669005', '809049', '809061', '279006', '809060', '809054', '34',
                 '459161', '809009', '809055', 'U99009', '004997', '709022', '809034', '809043', '300006', '300069',
                 '300070', '300007', '809057', '459183', '809053', '1349', '279005', '300119', '339128', '10005',
                 '21A002', '439015', '809038', '809051', '809056', '809058', '979025', '339129', '137', '269028',
                 '300015', '459207', '709016', '809004', '809008', '809016', '809020', '809027', '369108', '809036',
                 '809050', '0107', '019017', '300022', '300146', '369098', '459141', '739005', '809046', 'G49050',
                 '019002', '069007', '10012', '1125', '1461', '300087', '339126', '759001', '809018', '809029', '809039',
                 '819013', '839018', '131', '184', '269029', '269031', '279001', '311', '339105', '339130', '459154',
                 '459156', '709044', '809006', '809007', '809013', '809033', '819026', '979029', 'D29011', 'L19008',
                 '0109', '1359', '279002', '279004', '300129', '310', '339131', '35', '459159', '669010', '669043',
                 '809010',
                 '809041', '809048', '819019', '0108', '2452', '459158', '709027', '809023', '809045', '819016', 'D29009',
                 '069008', '1471', '159053', '300080', '300136', '3184', '36', '3818', '809026', '809030', '809040',
                 '809044',
                 '819015', '979024', 'P19033', 'T99002', '019001', '134', '2451', '300072', '300170', '300179', '3816',
                 '669046',
                 '709020', '709023', '709025', '809012', '819014', 'I69004', 'X19011', '0112', '019003', '10014', '1136',
                 '1346',
                 '1816', '186', '339114', '459116', '459182', '459184', '669014', '809011', '809017', '809019', '809028',
                 '809042',
                 '809047', '819010', '819020', 'I69005', '0105', '0111', '019062', '069003', '159063', '179176', '179226',
                 '229080', '2453',
                 '269052', '300039', '300185', '3302', '459206', '459211', '459332', '709013', '709048', '809031',
                 '809037', '819017',
                 '819023', '979027', '069002', '069005', '069010', '179177', '20000', '21A012', '2392', '279003', '300176',
                 '339107', '439016',
                 '439035', '459342', '699009', '709019', '729028', '809015', '819009', '819012', '819021', '819024',
                 '979096', 'D29008',
                 '0106', '019008', '019042', '019043', '019044', '019054', '069004', '1124', '1849', '269030', '300075',
                 '300114', '300117',
                 '300175', '300190', '319159', '339106', '339122', '346', '369008', '419008', '459117', '459181',
                 '459208', '709024',
                 '709043', '809014', '809032', '819022', 'J29018', 'T99001', '019033', '019038', '019055', '069044', '069050',
                 '179178',
                 '299168', '300038', '300166', '300180', '300183', '300184', '300188', '339125', '439011', '459155',
                 '459329', '669044',
                 '699003', '699005', '709030', '809035', '809059', '819008', '819011', '819027', '819028', '899022',
                 '979092', 'I19027',
                 'Q99001']

    labels = ['收缩压', '舒张压', '血清甘油三酯', '血清高密度脂蛋白', '血清低密度脂蛋白']
    train_data = train_all[0:31000]
    # 只有前30000行训练，看看结果
    sum_loss = 0

    for k in range(0, 5, 1):

        test_of_train_k = train_all[int(0.2 * k * train_all.index.max()):int(0.2 * (k + 1) * train_all.index.max())]
        y_test_k = test_of_train_k[labels]

        for m in range(0, 5, 1):
            for n in range(int(0.2 * k * train_all.index.max()), int(0.2 * (k + 1) * train_all.index.max()), 1):
                y_test_k.iloc[:, m].fillna(np.round(y_test_k.iloc[:, m].mean(), 0), inplace=True)
                if y_test_k.iloc[:, m].get_value(n) <= 0 or y_test_k.iloc[:, m].get_value(n) > 250:
                    y_test_k.iloc[:, m].replace(y_test_k.iloc[:, m].get_value(n), np.round(y_test_k.iloc[:, m].mean()),
                                                inplace=True)

        for i in range(0, 5, 1):
            y_train_column_i = train_data[labels[i]]
            if i == 0:
                X_train_i = train_data[feature_0]
                test_of_train_data_k = test_of_train_k[feature_0]
                # 收缩压
                y_train_column_i.replace(0, np.round(y_train_column_i.mean(), 0), inplace=True)
                y_train_column_i.fillna(np.round(y_train_column_i.mean(), 0), inplace=True)
                clf_i = lgb.LGBMRegressor()
                clf_i.fit(X_train_i, y_train_column_i)
                test_of_train_k[labels[i]] = clf_i.predict(test_of_train_data_k)
            if i == 1:
                # 舒张压
                X_train_i = train_data[feature_1]
                test_of_train_data_k = test_of_train_k[feature_1]
                for j in range(y_train_column_i.index.max()):
                    if y_train_column_i.get_value(j) > 150:
                        y_train_column_i.replace(y_train_column_i.get_value(j), 150, inplace=True)
                    if y_train_column_i.get_value(j) == 0:
                        y_train_column_i.replace(y_train_column_i.get_value(j), np.round(y_train_column_i.mean(), 0),
                                                 inplace=True)
                y_train_column_i.fillna(np.round(y_train_column_i.mean(), 0), inplace=True)
                clf_i = lgb.LGBMRegressor()
                # clf_i = xgboost.XGBRegressor()
                clf_i.fit(X_train_i, y_train_column_i)
                test_of_train_k[labels[i]] = clf_i.predict(test_of_train_data_k)
            if i == 2:
                # 血清甘油三酯
                X_train_i = train_data[feature_2]
                test_of_train_data_k = test_of_train_k[feature_2]
                clf_i = lgb.LGBMRegressor()
                # clf_i = xgboost.XGBRegressor()
                clf_i.fit(X_train_i, y_train_column_i)

                test_of_train_k[labels[i]] = clf_i.predict(test_of_train_data_k)
            if i == 3:
                # 血清高密度脂蛋白
                X_train_i = train_data[feature_3]
                test_of_train_data_k = test_of_train_k[feature_3]
                clf_i = lgb.LGBMRegressor()
                # clf_i = xgboost.XGBRegressor()
                clf_i.fit(X_train_i, y_train_column_i)

                test_of_train_k[labels[i]] = clf_i.predict(test_of_train_data_k)
            if i == 4:
                # 血清低密度脂蛋白
                X_train_i = train_data[feature_4]
                test_of_train_data_k = test_of_train_k[feature_4]
                clf_i = lgb.LGBMRegressor()
                # clf_i = xgboost.XGBRegressor()
                clf_i.fit(X_train_i, y_train_column_i)
                test_of_train_k[labels[i]] = clf_i.predict(test_of_train_data_k)

        y_test_k = pd.DataFrame(y_test_k, columns=['收缩压', '舒张压', '血清甘油三酯', '血清高密度脂蛋白', '血清低密度脂蛋白'])
        y_pred_res_k = pd.DataFrame(test_of_train_k, columns=['收缩压', '舒张压', '血清甘油三酯', '血清高密度脂蛋白', '血清低密度脂蛋白'])

        print calc_logloss(y_test_k, y_pred_res_k)
        # 第五个就相当于测试集了，前4个是训练集的结果验证，看看过拟合程度

        # 400+列 ：0.0472163369872
        # 分别用不同的特征进行不同模型的训练后，结果为
        """
        收缩压 0.0166740467246
        舒张压 0.0195232836132
        血清甘油三酯 0.0971019126218
        血清高密度脂蛋白 0.0125174919356
        血清低密度脂蛋白 0.0360629526698
        0.036375937513
        收缩压 0.0172612322397
        舒张压 0.0194825324085
        血清甘油三酯 0.0945212815728
        血清高密度脂蛋白 0.0124212749101
        血清低密度脂蛋白 0.0358005509648
        0.0358973744192
        收缩压 0.0168164960706
        舒张压 0.0197550982475
        血清甘油三酯 0.0992848103713
        血清高密度脂蛋白 0.0132709617339
        血清低密度脂蛋白 0.0359912661423
        0.0370237265131
        收缩压 0.0166998178591
        舒张压 0.0189833094836
        血清甘油三酯 0.0929833095454
        血清高密度脂蛋白 0.0120440916946
        血清低密度脂蛋白 0.0358798794827
        0.0353180816131
        收缩压 0.0214903594089
        舒张压 0.0244003456732
        血清甘油三酯 0.123119529659
        血清高密度脂蛋白 0.0189025897848
        血清低密度脂蛋白 0.0488572538816
        0.0473540156814
        """
